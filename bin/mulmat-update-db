#!/usr/bin/env python3
"""Download new futures expirations and update our local file database.
"""
__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "Apache 2.0"

from os import path
import itertools
import logging
import os
import pathlib
import pprint
import re
import tempfile
import time

import click
from selenium import webdriver
from selenium.webdriver.chrome import options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait as wait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import StaleElementReferenceException
from petl import Table
import petl


URL = "https://www.cmegroup.com/tools-information/quikstrike/product-expiration-browser.html"


NUM_RETRIES = 5


def retry_click_until(widget, *args):
    waiter = wait(widget, 8)
    for _ in range(NUM_RETRIES):
        try:
            action = waiter.until(EC.element_to_be_clickable(*args))
            return action.click()
        except StaleElementReferenceException:
            waiter.until(EC.staleness_of(action))


def fetch_expirations(tmpdir: str, headless: bool) -> list[pathlib.Path]:
    """Fetch expirations for a subset of futures products to the given database.
    Overrides prior entries if they exist.
    The database is keyed by (contract-type, symbol).
    Returns the list of filenames.
    """

    # {2023-05-13} Setting the default download directory doesn't work anymore.
    # Chrome/Selenium is a shitshow. There's about a million people with a
    # million solutions online. Couldn't get it to work under 30mins of
    # fiddling. F*ck it, let's use the Downloads direcotry.
    # with tempfile.TemporaryDirectory(prefix="mulmat.", dir="/home/blais") as tmpdir:
    logging.info(f"Deleting previous files")
    for p in get_expirations_filenames(tmpdir):
        p.unlink()

    logging.info(f"Storing temporary files to {tmpdir}")

    # Create driver.
    opts = options.Options()
    opts.headless = headless
    opts.prompt_for_download = False
    prefs = {
        ## # Allow multiple downloads; disable the corresponding popup.
        ## "profile.default_content_setting_values.automatic_downloads": 1,
        ## "default_content_settings.multiple-automatic-downloads": 1,
        #
        # Set the download directory.
        # "download.default_directory": tmpdir,
        # "safefile.default_directory": tmpdir,
        # "directory_upgrade": True,
        # "extensions_to_open": "",
        # "safebrowsing.enabled": True,
        #
        # Popup that disappears. See
        # https://stackoverflow.com/questions/69710309/selenium-test-ok-cancel-popup-disappearing-immediately
        ## "unexpectedAlertBehaviour": "ignore",
    }
    opts.add_experimental_option("prefs", prefs)
    driver = webdriver.Chrome(executable_path="chromedriver", options=opts)

    # Open the page and click away the "accept cookies" button
    # (id:pardotCookieButton).
    driver.get(URL)

    accept = driver.find_element(By.ID, "onetrust-accept-btn-handler")
    # accept = driver.find_element(By.XPATH, '//a[text()="Accept All Cookies"]')
    accept.click()

    # Find the iframe and switch to it.
    # Note: This used to get the frame id; stopped working in 2/22.
    iframe = 0
    wait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it(iframe))

    # Find the tabs, and iterate through them.
    ul = driver.find_element(By.CLASS_NAME, "cme-tabs")
    titles = [a.get_attribute("title") for a in ul.find_elements(By.TAG_NAME, "a")]
    tab_filenames = []

    # Wait for some input.
    print("Press any key when done")
    input()


def get_expirations_filenames(directory: str) -> list[str]:
    return sorted(
        [
            p.absolute()
            for p in pathlib.Path(directory).iterdir()
            if re.match("Expirations.*\.csv$", p.name)
        ],
        key=lambda p: p.stat().st_mtime
    )


@click.command()
@click.option("--no-fetch", default=False)
@click.option("--headless/--no-headless", default=False)
@click.argument("old-database")
@click.argument("new-database")
def main(no_fetch: bool, old_database: str, new_database: str, headless: bool):
    logging.basicConfig(level=logging.INFO, format="%(levelname)-8s: %(message)s")

    tmpdir = os.path.expanduser("~/Downloads")
    logging.info(f"Using downloads directory {tmpdir}")

    logging.info("Read prior database of expirations.")
    keyfields = ["Contract Type", "Symbol"]
    expirations = (
        petl.fromcsv(old_database) if path.exists(old_database) else petl.empty()
    )

    logging.info("Fetching new expirations.")
    if not no_fetch:
        fetch_expirations(tmpdir, headless)
    filenames = get_expirations_filenames(tmpdir)
    tables = [petl.fromcsv(filename) for filename in filenames]
    new_expirations = petl.cat(*tables)

    logging.info("Override old values from the original db.")
    expirations_dict = expirations.lookupone(keyfields)
    for rec in new_expirations.records():
        key = (rec["Contract Type"], rec["Symbol"])
        expirations_dict[key] = tuple(rec)
    new_expirations = petl.wrap(
        itertools.chain([petl.header(expirations)], expirations_dict.values())
    ).sort(keyfields)

    logging.info("Write out the new file (for comparison).")
    new_expirations.tocsv(new_database)

    logging.info("Cleaning up obsoleted files.")
    for p in get_expirations_filenames(tmpdir):
        p.unlink()


if __name__ == "__main__":
    main()
